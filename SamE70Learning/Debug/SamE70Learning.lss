
SamE70Learning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000508  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20400000  00400508  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  20400434  0040093c  00020434  2**2
                  ALLOC
  3 .heap         00000204  20400474  0040097c  00020434  2**0
                  ALLOC
  4 .stack        00000400  20400678  00400b80  00020434  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045e  2**0
                  CONTENTS, READONLY
  7 .debug_info   00001799  00000000  00000000  000204b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000361  00000000  00000000  00021c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000eb  00000000  00000000  00021fb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000080  00000000  00000000  0002209c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0002211c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000327fa  00000000  00000000  0002216c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000184e  00000000  00000000  00054966  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00112476  00000000  00000000  000561b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000270  00000000  00000000  0016862c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	78 0a 40 20 c5 01 40 00 c1 01 40 00 c1 01 40 00     x.@ ..@...@...@.
  400010:	c1 01 40 00 c1 01 40 00 c1 01 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	c1 01 40 00 c1 01 40 00 00 00 00 00 c1 01 40 00     ..@...@.......@.
  40003c:	c1 01 40 00 c1 01 40 00 c1 01 40 00 c1 01 40 00     ..@...@...@...@.
  40004c:	c1 01 40 00 c1 01 40 00 c1 01 40 00 c1 01 40 00     ..@...@...@...@.
  40005c:	c1 01 40 00 c1 01 40 00 00 00 00 00 c1 01 40 00     ..@...@.......@.
  40006c:	c1 01 40 00 c1 01 40 00 c1 01 40 00 c1 01 40 00     ..@...@...@...@.
  40007c:	c1 01 40 00 c1 01 40 00 c1 01 40 00 c1 01 40 00     ..@...@...@...@.
  40008c:	c1 01 40 00 c1 01 40 00 59 02 40 00 c1 01 40 00     ..@...@.Y.@...@.
  40009c:	c1 01 40 00 c1 01 40 00 c1 01 40 00 c1 01 40 00     ..@...@...@...@.
  4000ac:	c1 01 40 00 c1 01 40 00 c1 01 40 00 c1 01 40 00     ..@...@...@...@.
  4000bc:	c1 01 40 00 c1 01 40 00 c1 01 40 00 c1 01 40 00     ..@...@...@...@.
  4000cc:	c1 01 40 00 c1 01 40 00 c1 01 40 00 c1 01 40 00     ..@...@...@...@.
  4000dc:	c1 01 40 00 c1 01 40 00 c1 01 40 00 c1 01 40 00     ..@...@...@...@.
  4000ec:	c1 01 40 00 c1 01 40 00 c1 01 40 00 c1 01 40 00     ..@...@...@...@.
  4000fc:	c1 01 40 00 c1 01 40 00 c1 01 40 00 c1 01 40 00     ..@...@...@...@.
  40010c:	c1 01 40 00 c1 01 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 c1 01 40 00 c1 01 40 00 c1 01 40 00     ......@...@...@.
  40012c:	c1 01 40 00 c1 01 40 00 c1 01 40 00 c1 01 40 00     ..@...@...@...@.
  40013c:	c1 01 40 00 c1 01 40 00 c1 01 40 00 c1 01 40 00     ..@...@...@...@.
  40014c:	c1 01 40 00 c1 01 40 00                             ..@...@.

00400154 <__do_global_dtors_aux>:
  400154:	b510      	push	{r4, lr}
  400156:	4c05      	ldr	r4, [pc, #20]	; (40016c <__do_global_dtors_aux+0x18>)
  400158:	7823      	ldrb	r3, [r4, #0]
  40015a:	b933      	cbnz	r3, 40016a <__do_global_dtors_aux+0x16>
  40015c:	4b04      	ldr	r3, [pc, #16]	; (400170 <__do_global_dtors_aux+0x1c>)
  40015e:	b113      	cbz	r3, 400166 <__do_global_dtors_aux+0x12>
  400160:	4804      	ldr	r0, [pc, #16]	; (400174 <__do_global_dtors_aux+0x20>)
  400162:	f3af 8000 	nop.w
  400166:	2301      	movs	r3, #1
  400168:	7023      	strb	r3, [r4, #0]
  40016a:	bd10      	pop	{r4, pc}
  40016c:	20400434 	.word	0x20400434
  400170:	00000000 	.word	0x00000000
  400174:	00400508 	.word	0x00400508

00400178 <frame_dummy>:
  400178:	4b0c      	ldr	r3, [pc, #48]	; (4001ac <frame_dummy+0x34>)
  40017a:	b143      	cbz	r3, 40018e <frame_dummy+0x16>
  40017c:	480c      	ldr	r0, [pc, #48]	; (4001b0 <frame_dummy+0x38>)
  40017e:	490d      	ldr	r1, [pc, #52]	; (4001b4 <frame_dummy+0x3c>)
  400180:	b510      	push	{r4, lr}
  400182:	f3af 8000 	nop.w
  400186:	480c      	ldr	r0, [pc, #48]	; (4001b8 <frame_dummy+0x40>)
  400188:	6803      	ldr	r3, [r0, #0]
  40018a:	b923      	cbnz	r3, 400196 <frame_dummy+0x1e>
  40018c:	bd10      	pop	{r4, pc}
  40018e:	480a      	ldr	r0, [pc, #40]	; (4001b8 <frame_dummy+0x40>)
  400190:	6803      	ldr	r3, [r0, #0]
  400192:	b933      	cbnz	r3, 4001a2 <frame_dummy+0x2a>
  400194:	4770      	bx	lr
  400196:	4b09      	ldr	r3, [pc, #36]	; (4001bc <frame_dummy+0x44>)
  400198:	2b00      	cmp	r3, #0
  40019a:	d0f7      	beq.n	40018c <frame_dummy+0x14>
  40019c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001a0:	4718      	bx	r3
  4001a2:	4b06      	ldr	r3, [pc, #24]	; (4001bc <frame_dummy+0x44>)
  4001a4:	2b00      	cmp	r3, #0
  4001a6:	d0f5      	beq.n	400194 <frame_dummy+0x1c>
  4001a8:	4718      	bx	r3
  4001aa:	bf00      	nop
  4001ac:	00000000 	.word	0x00000000
  4001b0:	00400508 	.word	0x00400508
  4001b4:	20400438 	.word	0x20400438
  4001b8:	00400508 	.word	0x00400508
  4001bc:	00000000 	.word	0x00000000

004001c0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4001c0:	e7fe      	b.n	4001c0 <Dummy_Handler>
	...

004001c4 <Reset_Handler>:
{
  4001c4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4001c6:	4b17      	ldr	r3, [pc, #92]	; (400224 <Reset_Handler+0x60>)
  4001c8:	4a17      	ldr	r2, [pc, #92]	; (400228 <Reset_Handler+0x64>)
  4001ca:	429a      	cmp	r2, r3
  4001cc:	d010      	beq.n	4001f0 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
  4001ce:	4b17      	ldr	r3, [pc, #92]	; (40022c <Reset_Handler+0x68>)
  4001d0:	4a14      	ldr	r2, [pc, #80]	; (400224 <Reset_Handler+0x60>)
  4001d2:	429a      	cmp	r2, r3
  4001d4:	d20c      	bcs.n	4001f0 <Reset_Handler+0x2c>
  4001d6:	3b01      	subs	r3, #1
  4001d8:	1a9b      	subs	r3, r3, r2
  4001da:	f023 0303 	bic.w	r3, r3, #3
  4001de:	3304      	adds	r3, #4
  4001e0:	4413      	add	r3, r2
  4001e2:	4911      	ldr	r1, [pc, #68]	; (400228 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
  4001e4:	f851 0b04 	ldr.w	r0, [r1], #4
  4001e8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4001ec:	429a      	cmp	r2, r3
  4001ee:	d1f9      	bne.n	4001e4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
  4001f0:	4b0f      	ldr	r3, [pc, #60]	; (400230 <Reset_Handler+0x6c>)
  4001f2:	4a10      	ldr	r2, [pc, #64]	; (400234 <Reset_Handler+0x70>)
  4001f4:	429a      	cmp	r2, r3
  4001f6:	d20a      	bcs.n	40020e <Reset_Handler+0x4a>
  4001f8:	3b01      	subs	r3, #1
  4001fa:	1a9b      	subs	r3, r3, r2
  4001fc:	f023 0303 	bic.w	r3, r3, #3
  400200:	3304      	adds	r3, #4
  400202:	4413      	add	r3, r2
                *pDest++ = 0;
  400204:	2100      	movs	r1, #0
  400206:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  40020a:	4293      	cmp	r3, r2
  40020c:	d1fb      	bne.n	400206 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40020e:	4a0a      	ldr	r2, [pc, #40]	; (400238 <Reset_Handler+0x74>)
  400210:	4b0a      	ldr	r3, [pc, #40]	; (40023c <Reset_Handler+0x78>)
  400212:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400216:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400218:	4b09      	ldr	r3, [pc, #36]	; (400240 <Reset_Handler+0x7c>)
  40021a:	4798      	blx	r3
        main();
  40021c:	4b09      	ldr	r3, [pc, #36]	; (400244 <Reset_Handler+0x80>)
  40021e:	4798      	blx	r3
  400220:	e7fe      	b.n	400220 <Reset_Handler+0x5c>
  400222:	bf00      	nop
  400224:	20400000 	.word	0x20400000
  400228:	00400508 	.word	0x00400508
  40022c:	20400434 	.word	0x20400434
  400230:	20400474 	.word	0x20400474
  400234:	20400434 	.word	0x20400434
  400238:	e000ed00 	.word	0xe000ed00
  40023c:	00400000 	.word	0x00400000
  400240:	00400371 	.word	0x00400371
  400244:	004002f9 	.word	0x004002f9

00400248 <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
    // Keep the default device state after reset
    SystemCoreClock = __SYSTEM_CLOCK;
  400248:	4a01      	ldr	r2, [pc, #4]	; (400250 <SystemInit+0x8>)
  40024a:	4b02      	ldr	r3, [pc, #8]	; (400254 <SystemInit+0xc>)
  40024c:	601a      	str	r2, [r3, #0]
  40024e:	4770      	bx	lr
  400250:	00b71b00 	.word	0x00b71b00
  400254:	20400000 	.word	0x20400000

00400258 <SPI0_Handler>:
//SPCK is PD22 peripheral B


void SPI0_Handler (){
	//Made it
	SPI0->SPI_TDR       =   SPI_TDR_PCS(0x01)|
  400258:	4a01      	ldr	r2, [pc, #4]	; (400260 <SPI0_Handler+0x8>)
  40025a:	4b02      	ldr	r3, [pc, #8]	; (400264 <SPI0_Handler+0xc>)
  40025c:	60da      	str	r2, [r3, #12]
  40025e:	4770      	bx	lr
  400260:	000100aa 	.word	0x000100aa
  400264:	40008000 	.word	0x40008000

00400268 <_Z7initSPIv>:

void initSPI(void){
    //Configure PMC_PCR to enable clock?
    
    //Give SPI a clock
    PMC->PMC_PCER0  = (1<< ID_SPI0);
  400268:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  40026c:	4b1d      	ldr	r3, [pc, #116]	; (4002e4 <_Z7initSPIv+0x7c>)
  40026e:	6118      	str	r0, [r3, #16]
    //Start SPI
    SPI0->SPI_CR    = SPI_CR_SPIEN;
  400270:	4a1d      	ldr	r2, [pc, #116]	; (4002e8 <_Z7initSPIv+0x80>)
  400272:	2301      	movs	r3, #1
  400274:	6013      	str	r3, [r2, #0]
    //Setup to forced CS and Master mode
    SPI0->SPI_MR    = SPI_MR_PS_Msk|SPI_MR_MSTR_Msk;
  400276:	2303      	movs	r3, #3
  400278:	6053      	str	r3, [r2, #4]
	
    //Setup NPCS1 peripheral control
    PIOD->PIO_ABCDSR[0] |=  (1 << SPI0_NPCS1_PIN);
  40027a:	4b1c      	ldr	r3, [pc, #112]	; (4002ec <_Z7initSPIv+0x84>)
  40027c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40027e:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  400282:	6719      	str	r1, [r3, #112]	; 0x70
    PIOD->PIO_ABCDSR[1] &= ~(1 << SPI0_NPCS1_PIN);
  400284:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400286:	f021 7100 	bic.w	r1, r1, #33554432	; 0x2000000
  40028a:	6759      	str	r1, [r3, #116]	; 0x74
	
    //Setup MISO peripheral control
    PIOD->PIO_ABCDSR[0] |=  (1 << SPI0_MISO_PIN);
  40028c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40028e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400292:	6719      	str	r1, [r3, #112]	; 0x70
    PIOD->PIO_ABCDSR[1] &= ~(1 << SPI0_MISO_PIN);
  400294:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400296:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  40029a:	6759      	str	r1, [r3, #116]	; 0x74
    
	//Setup MOSI peripheral control
	PIOD->PIO_ABCDSR[0] |=  (1 << SPI0_MOSI_PIN);
  40029c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40029e:	4301      	orrs	r1, r0
  4002a0:	6719      	str	r1, [r3, #112]	; 0x70
	PIOD->PIO_ABCDSR[1] &= ~(1 << SPI0_MOSI_PIN);
  4002a2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4002a4:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4002a8:	6759      	str	r1, [r3, #116]	; 0x74
	
	//Setup SCK peripheral control
    PIOD->PIO_ABCDSR[0] |=  (1 << SPI0_SPCK_PIN);
  4002aa:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4002ac:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
  4002b0:	6719      	str	r1, [r3, #112]	; 0x70
    PIOD->PIO_ABCDSR[1] &= ~(1 << SPI0_SPCK_PIN);
  4002b2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4002b4:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
  4002b8:	6759      	str	r1, [r3, #116]	; 0x74
	
	//Set pins to be driven by peripheral
	PIOD->PIO_PDR		=   (1 << SPI0_NPCS1_PIN)	|
  4002ba:	f04f 711c 	mov.w	r1, #40894464	; 0x2700000
  4002be:	6059      	str	r1, [r3, #4]
							(1 << SPI0_MISO_PIN)	|
							(1 << SPI0_MOSI_PIN)	|
							(1 << SPI0_SPCK_PIN);
	
    //Setup Particular CSR
    SPI0->SPI_CSR[0]    =   SPI_CSR_BITS_8_BIT  |   // 8 Bit mode
  4002c0:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
  4002c4:	6313      	str	r3, [r2, #48]	; 0x30
                            SPI_CSR_SCBR(120);		// Clk div of 120
                           // SPI_CSR_CSNAAT_Msk  ;   // Rise after 
    SPI0->SPI_CSR[1]    =   SPI0->SPI_CSR[0];
  4002c6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4002c8:	6353      	str	r3, [r2, #52]	; 0x34
    SPI0->SPI_CSR[2]    =   SPI0->SPI_CSR[0];
  4002ca:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4002cc:	6393      	str	r3, [r2, #56]	; 0x38
    SPI0->SPI_CSR[3]    =   SPI0->SPI_CSR[0];
  4002ce:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4002d0:	63d3      	str	r3, [r2, #60]	; 0x3c
    
	//Enable data load interrupt
	SPI0->SPI_IER       =   SPI_IER_TDRE_Msk;
  4002d2:	2302      	movs	r3, #2
  4002d4:	6153      	str	r3, [r2, #20]
	//enable interrupt at NVIC
	NVIC->ISER[0]		=   (1 << ID_SPI0);
  4002d6:	4906      	ldr	r1, [pc, #24]	; (4002f0 <_Z7initSPIv+0x88>)
  4002d8:	6008      	str	r0, [r1, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4002da:	b662      	cpsie	i
	__enable_irq();
//  Send data to Chip Select 1
    SPI0->SPI_TDR       =   SPI_TDR_PCS(0x01)|
  4002dc:	4905      	ldr	r1, [pc, #20]	; (4002f4 <_Z7initSPIv+0x8c>)
  4002de:	60d1      	str	r1, [r2, #12]
                            SPI_TDR_TD(0xAA);
	//Enable data load interrupt
	SPI0->SPI_IER       =   SPI_IER_TDRE_Msk;
  4002e0:	6153      	str	r3, [r2, #20]
  4002e2:	4770      	bx	lr
  4002e4:	400e0600 	.word	0x400e0600
  4002e8:	40008000 	.word	0x40008000
  4002ec:	400e1400 	.word	0x400e1400
  4002f0:	e000e100 	.word	0xe000e100
  4002f4:	000100aa 	.word	0x000100aa

004002f8 <main>:
}

int main(void)
{
  4002f8:	b508      	push	{r3, lr}
	//Todo: PB13 to peripheral B
	//Todo: find out how to enable PCLK0 output
	//
	//Stop watch dog
	WDT->WDT_MR |= WDT_MR_WDDIS_Msk;
  4002fa:	4a16      	ldr	r2, [pc, #88]	; (400354 <main+0x5c>)
  4002fc:	6853      	ldr	r3, [r2, #4]
  4002fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  400302:	6053      	str	r3, [r2, #4]
    /* Initialize the SAM system */
    SystemInit();
  400304:	4b14      	ldr	r3, [pc, #80]	; (400358 <main+0x60>)
  400306:	4798      	blx	r3
	//Set CLOCK_PIN to output based on peripheral
	
	PIOB->PIO_ABCDSR[0]|= (1 << CLOCK_PIN);
  400308:	4b14      	ldr	r3, [pc, #80]	; (40035c <main+0x64>)
  40030a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40030c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  400310:	671a      	str	r2, [r3, #112]	; 0x70
	PIOB->PIO_ABCDSR[1]&= ~(1 << CLOCK_PIN);
  400312:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400314:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  400318:	675a      	str	r2, [r3, #116]	; 0x74
	PIOB->PIO_PDR		= (1 << CLOCK_PIN);
  40031a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40031e:	605a      	str	r2, [r3, #4]
    //Set clock source to main
    PMC->PMC_PCK[0] = PMC_PCK_CSS_MCK;
  400320:	4a0f      	ldr	r2, [pc, #60]	; (400360 <main+0x68>)
  400322:	2304      	movs	r3, #4
  400324:	6413      	str	r3, [r2, #64]	; 0x40
    //Enable the clock
	PMC->PMC_SCER   = PMC_SCSR_PCK0;
  400326:	f44f 7380 	mov.w	r3, #256	; 0x100
  40032a:	6013      	str	r3, [r2, #0]
	
    //Setting up LED pin
	PIOC->PIO_PER = (1 << LEDPIN);
  40032c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
  400330:	6013      	str	r3, [r2, #0]
	PIOC->PIO_OER = (1 << LEDPIN);
  400332:	6113      	str	r3, [r2, #16]
	initSPI();
  400334:	4b0b      	ldr	r3, [pc, #44]	; (400364 <main+0x6c>)
  400336:	4798      	blx	r3
    
    //
    /* Replace with your application code */
    while (1) {
		PIOC->PIO_SODR = (1 << LEDPIN);
  400338:	4a0b      	ldr	r2, [pc, #44]	; (400368 <main+0x70>)
  40033a:	f44f 7180 	mov.w	r1, #256	; 0x100
  40033e:	4608      	mov	r0, r1
  400340:	6310      	str	r0, [r2, #48]	; 0x30
  400342:	4b0a      	ldr	r3, [pc, #40]	; (40036c <main+0x74>)
		for(unsigned int i = 0xFFFFF; i> 0; i--);
  400344:	3b01      	subs	r3, #1
  400346:	d1fd      	bne.n	400344 <main+0x4c>
		PIOC->PIO_CODR =(1 << LEDPIN);
  400348:	6351      	str	r1, [r2, #52]	; 0x34
  40034a:	4b08      	ldr	r3, [pc, #32]	; (40036c <main+0x74>)
		for(unsigned int i = 0xFFFFF; i> 0; i--);
  40034c:	3b01      	subs	r3, #1
  40034e:	d0f7      	beq.n	400340 <main+0x48>
  400350:	e7fc      	b.n	40034c <main+0x54>
  400352:	bf00      	nop
  400354:	400e1850 	.word	0x400e1850
  400358:	00400249 	.word	0x00400249
  40035c:	400e1000 	.word	0x400e1000
  400360:	400e0600 	.word	0x400e0600
  400364:	00400269 	.word	0x00400269
  400368:	400e1200 	.word	0x400e1200
  40036c:	000fffff 	.word	0x000fffff

00400370 <__libc_init_array>:
  400370:	b570      	push	{r4, r5, r6, lr}
  400372:	4e0f      	ldr	r6, [pc, #60]	; (4003b0 <__libc_init_array+0x40>)
  400374:	4d0f      	ldr	r5, [pc, #60]	; (4003b4 <__libc_init_array+0x44>)
  400376:	1b76      	subs	r6, r6, r5
  400378:	10b6      	asrs	r6, r6, #2
  40037a:	bf18      	it	ne
  40037c:	2400      	movne	r4, #0
  40037e:	d005      	beq.n	40038c <__libc_init_array+0x1c>
  400380:	3401      	adds	r4, #1
  400382:	f855 3b04 	ldr.w	r3, [r5], #4
  400386:	4798      	blx	r3
  400388:	42a6      	cmp	r6, r4
  40038a:	d1f9      	bne.n	400380 <__libc_init_array+0x10>
  40038c:	4e0a      	ldr	r6, [pc, #40]	; (4003b8 <__libc_init_array+0x48>)
  40038e:	4d0b      	ldr	r5, [pc, #44]	; (4003bc <__libc_init_array+0x4c>)
  400390:	1b76      	subs	r6, r6, r5
  400392:	f000 f8a7 	bl	4004e4 <_init>
  400396:	10b6      	asrs	r6, r6, #2
  400398:	bf18      	it	ne
  40039a:	2400      	movne	r4, #0
  40039c:	d006      	beq.n	4003ac <__libc_init_array+0x3c>
  40039e:	3401      	adds	r4, #1
  4003a0:	f855 3b04 	ldr.w	r3, [r5], #4
  4003a4:	4798      	blx	r3
  4003a6:	42a6      	cmp	r6, r4
  4003a8:	d1f9      	bne.n	40039e <__libc_init_array+0x2e>
  4003aa:	bd70      	pop	{r4, r5, r6, pc}
  4003ac:	bd70      	pop	{r4, r5, r6, pc}
  4003ae:	bf00      	nop
  4003b0:	004004f0 	.word	0x004004f0
  4003b4:	004004f0 	.word	0x004004f0
  4003b8:	004004f8 	.word	0x004004f8
  4003bc:	004004f0 	.word	0x004004f0

004003c0 <register_fini>:
  4003c0:	4b02      	ldr	r3, [pc, #8]	; (4003cc <register_fini+0xc>)
  4003c2:	b113      	cbz	r3, 4003ca <register_fini+0xa>
  4003c4:	4802      	ldr	r0, [pc, #8]	; (4003d0 <register_fini+0x10>)
  4003c6:	f000 b805 	b.w	4003d4 <atexit>
  4003ca:	4770      	bx	lr
  4003cc:	00000000 	.word	0x00000000
  4003d0:	004003e1 	.word	0x004003e1

004003d4 <atexit>:
  4003d4:	2300      	movs	r3, #0
  4003d6:	4601      	mov	r1, r0
  4003d8:	461a      	mov	r2, r3
  4003da:	4618      	mov	r0, r3
  4003dc:	f000 b81e 	b.w	40041c <__register_exitproc>

004003e0 <__libc_fini_array>:
  4003e0:	b538      	push	{r3, r4, r5, lr}
  4003e2:	4c0a      	ldr	r4, [pc, #40]	; (40040c <__libc_fini_array+0x2c>)
  4003e4:	4d0a      	ldr	r5, [pc, #40]	; (400410 <__libc_fini_array+0x30>)
  4003e6:	1b64      	subs	r4, r4, r5
  4003e8:	10a4      	asrs	r4, r4, #2
  4003ea:	d00a      	beq.n	400402 <__libc_fini_array+0x22>
  4003ec:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4003f0:	3b01      	subs	r3, #1
  4003f2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4003f6:	3c01      	subs	r4, #1
  4003f8:	f855 3904 	ldr.w	r3, [r5], #-4
  4003fc:	4798      	blx	r3
  4003fe:	2c00      	cmp	r4, #0
  400400:	d1f9      	bne.n	4003f6 <__libc_fini_array+0x16>
  400402:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  400406:	f000 b877 	b.w	4004f8 <_fini>
  40040a:	bf00      	nop
  40040c:	00400508 	.word	0x00400508
  400410:	00400504 	.word	0x00400504

00400414 <__retarget_lock_acquire_recursive>:
  400414:	4770      	bx	lr
  400416:	bf00      	nop

00400418 <__retarget_lock_release_recursive>:
  400418:	4770      	bx	lr
  40041a:	bf00      	nop

0040041c <__register_exitproc>:
  40041c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400420:	4d2c      	ldr	r5, [pc, #176]	; (4004d4 <__register_exitproc+0xb8>)
  400422:	4606      	mov	r6, r0
  400424:	6828      	ldr	r0, [r5, #0]
  400426:	4698      	mov	r8, r3
  400428:	460f      	mov	r7, r1
  40042a:	4691      	mov	r9, r2
  40042c:	f7ff fff2 	bl	400414 <__retarget_lock_acquire_recursive>
  400430:	4b29      	ldr	r3, [pc, #164]	; (4004d8 <__register_exitproc+0xbc>)
  400432:	681c      	ldr	r4, [r3, #0]
  400434:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  400438:	2b00      	cmp	r3, #0
  40043a:	d03e      	beq.n	4004ba <__register_exitproc+0x9e>
  40043c:	685a      	ldr	r2, [r3, #4]
  40043e:	2a1f      	cmp	r2, #31
  400440:	dc1c      	bgt.n	40047c <__register_exitproc+0x60>
  400442:	f102 0e01 	add.w	lr, r2, #1
  400446:	b176      	cbz	r6, 400466 <__register_exitproc+0x4a>
  400448:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40044c:	2401      	movs	r4, #1
  40044e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  400452:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  400456:	4094      	lsls	r4, r2
  400458:	4320      	orrs	r0, r4
  40045a:	2e02      	cmp	r6, #2
  40045c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  400460:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  400464:	d023      	beq.n	4004ae <__register_exitproc+0x92>
  400466:	3202      	adds	r2, #2
  400468:	f8c3 e004 	str.w	lr, [r3, #4]
  40046c:	6828      	ldr	r0, [r5, #0]
  40046e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  400472:	f7ff ffd1 	bl	400418 <__retarget_lock_release_recursive>
  400476:	2000      	movs	r0, #0
  400478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40047c:	4b17      	ldr	r3, [pc, #92]	; (4004dc <__register_exitproc+0xc0>)
  40047e:	b30b      	cbz	r3, 4004c4 <__register_exitproc+0xa8>
  400480:	f44f 70c8 	mov.w	r0, #400	; 0x190
  400484:	f3af 8000 	nop.w
  400488:	4603      	mov	r3, r0
  40048a:	b1d8      	cbz	r0, 4004c4 <__register_exitproc+0xa8>
  40048c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  400490:	6002      	str	r2, [r0, #0]
  400492:	2100      	movs	r1, #0
  400494:	6041      	str	r1, [r0, #4]
  400496:	460a      	mov	r2, r1
  400498:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40049c:	f04f 0e01 	mov.w	lr, #1
  4004a0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4004a4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4004a8:	2e00      	cmp	r6, #0
  4004aa:	d0dc      	beq.n	400466 <__register_exitproc+0x4a>
  4004ac:	e7cc      	b.n	400448 <__register_exitproc+0x2c>
  4004ae:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4004b2:	430c      	orrs	r4, r1
  4004b4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4004b8:	e7d5      	b.n	400466 <__register_exitproc+0x4a>
  4004ba:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4004be:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4004c2:	e7bb      	b.n	40043c <__register_exitproc+0x20>
  4004c4:	6828      	ldr	r0, [r5, #0]
  4004c6:	f7ff ffa7 	bl	400418 <__retarget_lock_release_recursive>
  4004ca:	f04f 30ff 	mov.w	r0, #4294967295
  4004ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4004d2:	bf00      	nop
  4004d4:	20400430 	.word	0x20400430
  4004d8:	004004e0 	.word	0x004004e0
  4004dc:	00000000 	.word	0x00000000

004004e0 <_global_impure_ptr>:
  4004e0:	20400008                                ..@ 

004004e4 <_init>:
  4004e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4004e6:	bf00      	nop
  4004e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4004ea:	bc08      	pop	{r3}
  4004ec:	469e      	mov	lr, r3
  4004ee:	4770      	bx	lr

004004f0 <__init_array_start>:
  4004f0:	004003c1 	.word	0x004003c1

004004f4 <__frame_dummy_init_array_entry>:
  4004f4:	00400179                                y.@.

004004f8 <_fini>:
  4004f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4004fa:	bf00      	nop
  4004fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4004fe:	bc08      	pop	{r3}
  400500:	469e      	mov	lr, r3
  400502:	4770      	bx	lr

00400504 <__fini_array_start>:
  400504:	00400155 	.word	0x00400155
